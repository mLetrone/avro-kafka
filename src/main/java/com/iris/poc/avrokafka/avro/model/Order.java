/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.iris.poc.avrokafka.avro.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Order extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1565570828284435318L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Order\",\"namespace\":\"com.iris.poc.avrokafka.avro.model\",\"fields\":[{\"name\":\"order_id\",\"type\":\"string\",\"doc\":\"Id of the order filed\"},{\"name\":\"customer_id\",\"type\":\"string\",\"doc\":\"Id of the customer\"},{\"name\":\"items\",\"type\":\"int\",\"doc\":\"Total number of items in the order\"},{\"name\":\"price\",\"type\":\"float\",\"doc\":\"Total price of the order\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Order> ENCODER =
      new BinaryMessageEncoder<Order>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Order> DECODER =
      new BinaryMessageDecoder<Order>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Order> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Order> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Order>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Order to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Order from a ByteBuffer. */
  public static Order fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Id of the order filed */
  @Deprecated public java.lang.CharSequence order_id;
  /** Id of the customer */
  @Deprecated public java.lang.CharSequence customer_id;
  /** Total number of items in the order */
  @Deprecated public int items;
  /** Total price of the order */
  @Deprecated public float price;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Order() {}

  /**
   * All-args constructor.
   * @param order_id Id of the order filed
   * @param customer_id Id of the customer
   * @param items Total number of items in the order
   * @param price Total price of the order
   */
  public Order(java.lang.CharSequence order_id, java.lang.CharSequence customer_id, java.lang.Integer items, java.lang.Float price) {
    this.order_id = order_id;
    this.customer_id = customer_id;
    this.items = items;
    this.price = price;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return order_id;
    case 1: return customer_id;
    case 2: return items;
    case 3: return price;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: order_id = (java.lang.CharSequence)value$; break;
    case 1: customer_id = (java.lang.CharSequence)value$; break;
    case 2: items = (java.lang.Integer)value$; break;
    case 3: price = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'order_id' field.
   * @return Id of the order filed
   */
  public java.lang.CharSequence getOrderId() {
    return order_id;
  }

  /**
   * Sets the value of the 'order_id' field.
   * Id of the order filed
   * @param value the value to set.
   */
  public void setOrderId(java.lang.CharSequence value) {
    this.order_id = value;
  }

  /**
   * Gets the value of the 'customer_id' field.
   * @return Id of the customer
   */
  public java.lang.CharSequence getCustomerId() {
    return customer_id;
  }

  /**
   * Sets the value of the 'customer_id' field.
   * Id of the customer
   * @param value the value to set.
   */
  public void setCustomerId(java.lang.CharSequence value) {
    this.customer_id = value;
  }

  /**
   * Gets the value of the 'items' field.
   * @return Total number of items in the order
   */
  public java.lang.Integer getItems() {
    return items;
  }

  /**
   * Sets the value of the 'items' field.
   * Total number of items in the order
   * @param value the value to set.
   */
  public void setItems(java.lang.Integer value) {
    this.items = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return Total price of the order
   */
  public java.lang.Float getPrice() {
    return price;
  }

  /**
   * Sets the value of the 'price' field.
   * Total price of the order
   * @param value the value to set.
   */
  public void setPrice(java.lang.Float value) {
    this.price = value;
  }

  /**
   * Creates a new Order RecordBuilder.
   * @return A new Order RecordBuilder
   */
  public static com.iris.poc.avrokafka.avro.model.Order.Builder newBuilder() {
    return new com.iris.poc.avrokafka.avro.model.Order.Builder();
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Order RecordBuilder
   */
  public static com.iris.poc.avrokafka.avro.model.Order.Builder newBuilder(com.iris.poc.avrokafka.avro.model.Order.Builder other) {
    return new com.iris.poc.avrokafka.avro.model.Order.Builder(other);
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Order instance.
   * @param other The existing instance to copy.
   * @return A new Order RecordBuilder
   */
  public static com.iris.poc.avrokafka.avro.model.Order.Builder newBuilder(com.iris.poc.avrokafka.avro.model.Order other) {
    return new com.iris.poc.avrokafka.avro.model.Order.Builder(other);
  }

  /**
   * RecordBuilder for Order instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Order>
    implements org.apache.avro.data.RecordBuilder<Order> {

    /** Id of the order filed */
    private java.lang.CharSequence order_id;
    /** Id of the customer */
    private java.lang.CharSequence customer_id;
    /** Total number of items in the order */
    private int items;
    /** Total price of the order */
    private float price;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.iris.poc.avrokafka.avro.model.Order.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.order_id)) {
        this.order_id = data().deepCopy(fields()[0].schema(), other.order_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customer_id)) {
        this.customer_id = data().deepCopy(fields()[1].schema(), other.customer_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.items)) {
        this.items = data().deepCopy(fields()[2].schema(), other.items);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.price)) {
        this.price = data().deepCopy(fields()[3].schema(), other.price);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Order instance
     * @param other The existing instance to copy.
     */
    private Builder(com.iris.poc.avrokafka.avro.model.Order other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.order_id)) {
        this.order_id = data().deepCopy(fields()[0].schema(), other.order_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customer_id)) {
        this.customer_id = data().deepCopy(fields()[1].schema(), other.customer_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.items)) {
        this.items = data().deepCopy(fields()[2].schema(), other.items);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.price)) {
        this.price = data().deepCopy(fields()[3].schema(), other.price);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'order_id' field.
      * Id of the order filed
      * @return The value.
      */
    public java.lang.CharSequence getOrderId() {
      return order_id;
    }

    /**
      * Sets the value of the 'order_id' field.
      * Id of the order filed
      * @param value The value of 'order_id'.
      * @return This builder.
      */
    public com.iris.poc.avrokafka.avro.model.Order.Builder setOrderId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.order_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'order_id' field has been set.
      * Id of the order filed
      * @return True if the 'order_id' field has been set, false otherwise.
      */
    public boolean hasOrderId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'order_id' field.
      * Id of the order filed
      * @return This builder.
      */
    public com.iris.poc.avrokafka.avro.model.Order.Builder clearOrderId() {
      order_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'customer_id' field.
      * Id of the customer
      * @return The value.
      */
    public java.lang.CharSequence getCustomerId() {
      return customer_id;
    }

    /**
      * Sets the value of the 'customer_id' field.
      * Id of the customer
      * @param value The value of 'customer_id'.
      * @return This builder.
      */
    public com.iris.poc.avrokafka.avro.model.Order.Builder setCustomerId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.customer_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'customer_id' field has been set.
      * Id of the customer
      * @return True if the 'customer_id' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'customer_id' field.
      * Id of the customer
      * @return This builder.
      */
    public com.iris.poc.avrokafka.avro.model.Order.Builder clearCustomerId() {
      customer_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'items' field.
      * Total number of items in the order
      * @return The value.
      */
    public java.lang.Integer getItems() {
      return items;
    }

    /**
      * Sets the value of the 'items' field.
      * Total number of items in the order
      * @param value The value of 'items'.
      * @return This builder.
      */
    public com.iris.poc.avrokafka.avro.model.Order.Builder setItems(int value) {
      validate(fields()[2], value);
      this.items = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'items' field has been set.
      * Total number of items in the order
      * @return True if the 'items' field has been set, false otherwise.
      */
    public boolean hasItems() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'items' field.
      * Total number of items in the order
      * @return This builder.
      */
    public com.iris.poc.avrokafka.avro.model.Order.Builder clearItems() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * Total price of the order
      * @return The value.
      */
    public java.lang.Float getPrice() {
      return price;
    }

    /**
      * Sets the value of the 'price' field.
      * Total price of the order
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.iris.poc.avrokafka.avro.model.Order.Builder setPrice(float value) {
      validate(fields()[3], value);
      this.price = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * Total price of the order
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'price' field.
      * Total price of the order
      * @return This builder.
      */
    public com.iris.poc.avrokafka.avro.model.Order.Builder clearPrice() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Order build() {
      try {
        Order record = new Order();
        record.order_id = fieldSetFlags()[0] ? this.order_id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.customer_id = fieldSetFlags()[1] ? this.customer_id : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.items = fieldSetFlags()[2] ? this.items : (java.lang.Integer) defaultValue(fields()[2]);
        record.price = fieldSetFlags()[3] ? this.price : (java.lang.Float) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Order>
    WRITER$ = (org.apache.avro.io.DatumWriter<Order>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Order>
    READER$ = (org.apache.avro.io.DatumReader<Order>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
